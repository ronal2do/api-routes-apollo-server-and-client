generator client {
  provider = "prisma-client-js"
  // output   = "../../node_modules/.prisma/client/recicla-server"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserEndpointType {
  IOS
  ANDROID
  WEB
}

model UserPushToken {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  pushUser             User @relation(fields: [pushUserId], references: [id])
  pushUserId           String @db.ObjectId @unique @map("push_user_id")
  token                String
  deleted              Boolean
  active               Boolean
  createdAt            DateTime @db.Date
  updatedAt            DateTime @db.Date
  type                 UserEndpointType
}
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  username       String?  @unique
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userPushToken  UserPushToken? 
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Newsletter {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
}